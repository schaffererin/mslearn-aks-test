{{- /*
Copyright VMware, Inc.
SPDX-License-Identifier: APACHE-2.0
*/}}

apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "aspnet-core.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .values.commonLabels "context" $ ) | nindent 4 }}
  {{- if .values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- $podLabels := include "common.tplvalues.merge" ( dict "values" ( list .values.podLabels .values.commonLabels ) "context" . ) }}
  replicas: {{ .values.replicaCount }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 6 }}
  {{- if .values.updateStrategy }}
  strategy: {{- toYaml .values.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
      {{- if .values.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      {{- include "aspnet-core.imagePullSecrets" . | nindent 6 }}
      automountServiceAccountToken: {{ .values.serviceAccount.automountServiceAccountToken }}
      {{- if .values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "aspnet-core.serviceAccountName" . }}
      {{- if .values.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .values.podAffinityPreset "customLabels" $podLabels "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .values.podAntiAffinityPreset "customLabels" $podLabels "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .values.nodeAffinityPreset.type "key" .values.nodeAffinityPreset.key "values" .values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .values.schedulerName }}
      schedulerName: {{ .values.schedulerName | quote }}
      {{- end }}
      {{- if .values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .values.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      {{- if .values.priorityClassName }}
      priorityClassName: {{ .values.priorityClassName | quote }}
      {{- end }}
      {{- if .values.podSecurityContext.enabled }}
      securityContext:
        fsGroup: {{ .values.podSecurityContext.fsGroup }}
        {{- if .values.podSecurityContext.sysctls }}
        sysctls:
          {{- toYaml .values.podSecurityContext.sysctls | nindent 10 }}
        {{- end }}
      {{- end }}
      {{- if or .values.appFromExternalRepo.enabled .values.initContainers }}
      initContainers:
        {{- if .values.appFromExternalRepo.enabled }}
        - name: clone-repository
          image: {{ include "aspnet-core.git.image" . }}
          imagePullPolicy: {{ .values.appFromExternalRepo.clone.image.pullPolicy | quote }}
          command:
            - /bin/bash
            - -ec
            - |
              [[ -f "/opt/bitnami/scripts/git/entrypoint.sh" ]] && source "/opt/bitnami/scripts/git/entrypoint.sh"
              git clone {{ .values.appFromExternalRepo.clone.repository }} --branch {{ .values.appFromExternalRepo.clone.revision }} /repo
          volumeMounts:
            - name: repo
              mountPath: /repo
          {{- if .values.appFromExternalRepo.clone.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .values.appFromExternalRepo.clone.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        - name: dotnet-publish
          image: {{ include "aspnet-core.sdk.image" . }}
          imagePullPolicy: {{ .values.appFromExternalRepo.publish.image.pullPolicy | quote }}
          workingDir: /repo
          command:
            - /bin/bash
            - -ec
            - |
              cd {{ .values.appFromExternalRepo.publish.subFolder }}
              dotnet publish -o /app {{ .values.appFromExternalRepo.publish.extraFlags | join " " }}
          volumeMounts:
            - name: app
              mountPath: /app
            - name: repo
              mountPath: /repo
        {{- end }}
        {{- if .values.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .values.initContainers "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: aspnet-core
          image: {{ include "aspnet-core.image" . }}
          imagePullPolicy: {{ .values.image.pullPolicy | quote }}
          {{- if .values.containerSecurityContext.enabled }}
          securityContext:
            runAsUser: {{ .values.containerSecurityContext.runAsUser }}
            runAsNonRoot: {{ .values.containerSecurityContext.runAsNonRoot }}
          {{- end }}
          {{- if .values.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          workingDir: /app
          command:
          {{- if .values.command }}
          {{- include "common.tplvalues.render" (dict "value" .values.command "context" $) | nindent 12 }}
          {{- else if .values.appFromExternalRepo.enabled }}
          {{- include "common.tplvalues.render" (dict "value" .values.appFromExternalRepo.startCommand "context" $) | nindent 12 }}
          {{- else }}
            - dotnet
          {{- end }}
          {{- if .values.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .values.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: ASPNETCORE_URLS
              value: {{ .values.bindURLs | quote }}
            {{- if .values.image.debug }}
            - name: BITNAMI_DEBUG
              value: {{ .values.image.debug | quote }}
            {{- end }}
            {{- if .values.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          {{- if or .values.extraEnvVarsCM .values.extraEnvVarsSecret }}
          envFrom:
            {{- if .values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ tpl .values.extraEnvVarsCM . | quote }}
            {{- end }}
            {{- if .values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ tpl .values.extraEnvVarsSecret . | quote }}
            {{- end }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .values.containerPorts.http }}
          {{- if .values.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .values.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .values.livenessProbe.enabled }}
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: {{ .values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .values.livenessProbe.successThreshold }}
            failureThreshold: {{ .values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .values.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .values.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .values.readinessProbe.enabled }}
          readinessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: {{ .values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .values.readinessProbe.successThreshold }}
            failureThreshold: {{ .values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .values.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .values.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .values.startupProbe.enabled }}
          startupProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: {{ .values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .values.startupProbe.timeoutSeconds }}
            successThreshold: {{ .values.startupProbe.successThreshold }}
            failureThreshold: {{ .values.startupProbe.failureThreshold }}
          {{- end }}
          {{- if .values.resources }}
          resources: {{- toYaml .values.resources | nindent 12 }}
          {{- end }}
          {{- if or .values.appFromExternalRepo.enabled .values.appFromExistingPVC.enabled .values.extraVolumeMounts }}
          volumeMounts:
            {{- if or .values.appFromExternalRepo.enabled .values.appFromExistingPVC.enabled }}
            - name: app
              mountPath: /app
            {{- end }}
            {{- if .values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" ( dict "value" .values.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
          {{- end }}
        {{- if .values.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .values.sidecars "context" $) | nindent 8 }}
        {{- end }}
      {{- if or .values.appFromExternalRepo.enabled .values.appFromExistingPVC.enabled .values.extraVolumes }}
      volumes:
        {{- if .values.extraVolumes }}
        {{- include "common.tplvalues.render" ( dict "value" .values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
        {{- if or .values.appFromExternalRepo.enabled .values.appFromExistingPVC.enabled }}
        - name: app
        {{- if .values.appFromExistingPVC.enabled }}
          persistentVolumeClaim:
            claimName: {{ printf "%s" (tpl (default "" .values.appFromExistingPVC.existingClaim) .) }}
        {{- else }}
          emptyDir: {}
        - name: repo
          emptyDir: {}
        {{- end }}
        {{- end }}
      {{- end }}
